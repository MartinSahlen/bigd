/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package bigd

import bigd.grpc.MapReducerGrpc
import bigd.grpc.MapReduceReply
import bigd.grpc.MapReduceRequest
import io.grpc.Server
import io.grpc.ServerBuilder
import io.grpc.stub.StreamObserver
import java.util.logging.Logger


private class Greeter: MapReducerGrpc.MapReducerImplBase() {
    val logger = Logger.getLogger(Greeter::class.java.name)

    override fun mapReduce(request: MapReduceRequest, responseObserver: StreamObserver<MapReduceReply>) {
        logger.info("received request for file URI ${request.uri}")
        val reply = MapReduceReply.newBuilder().setMessage("Hello " + request.uri).build()
        responseObserver.onNext(reply);
        responseObserver.onCompleted();
    }
}

class App() {
    private val server: Server

    init {
        val port = 50051
        val greeter = Greeter()
        server = ServerBuilder.forPort(port)
                .addService(Greeter())
                .build()
                .start()
        greeter.logger.info("Server started, listening on " + port);

        Runtime.getRuntime().addShutdownHook(object : Thread() {
            override fun run() {
                // Use stderr here since the logger may have been reset by its JVM shutdown hook.
                System.err.println("*** shutting down gRPC server since JVM is shutting down")
                server.shutdown()
                System.err.println("*** server shut down")
            }
        })
    }

    fun blockUntilShutdown() {
        server.awaitTermination()
    }
}

fun main() {
val server = App()
    server.blockUntilShutdown()
}
